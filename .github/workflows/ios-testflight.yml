name: Build and Deploy iOS to TestFlight

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable verbose debug logging'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  ios:
    runs-on: macos-latest
    env:
      DEBUG_MODE: ${{ github.event.inputs.debug_enabled == 'true' }}
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v3
      
      - name: Create build directory structure
        run: |
          mkdir -p build/logs
          echo "Build started at $(date)" > build/logs/build_summary.log
      
      - name: 🔍 App configuration validation
        run: |
          echo "🔍 Validating app configuration..." 
          
          # Check if app.config.js exists and extract key info
          if [ -f "app.config.js" ]; then
            # Get bundle identifier from app config
            EXPECTED_BUNDLE_ID=$(node -p "
              try {
                const config = require('./app.config.js');
                const ios = config.expo?.ios || {};
                ios.bundleIdentifier;
              } catch(e) { 
                console.error('Error extracting bundle ID:', e);
                '';
              }
            " 2>&1 | tr -d '\"')
            
            # Get app name
            APP_NAME=$(node -p "
              try {
                const config = require('./app.config.js');
                config.name || config.expo?.name;
              } catch(e) { 
                console.error('Error extracting app name:', e);
                '';
              }
            " 2>&1 | tr -d '\"')
            
            echo "✅ Bundle ID: $EXPECTED_BUNDLE_ID"
            echo "✅ App name: $APP_NAME"
            
            # Save for later steps
            echo "EXPECTED_BUNDLE_ID=$EXPECTED_BUNDLE_ID" >> $GITHUB_ENV
            echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          else
            echo "❌ app.config.js not found"
            echo "EXPECTED_BUNDLE_ID=UNKNOWN" >> $GITHUB_ENV
          fi
      
      - name: 🔍 Find Xcode project/workspace
        id: find_xcode_project
        working-directory: ./ios
        run: |
          # Find the .xcworkspace or .xcodeproj file
          WORKSPACE_FILE=$(find . -name "*.xcworkspace" -maxdepth 1 | head -n 1)
          PROJECT_FILE=$(find . -name "*.xcodeproj" -maxdepth 1 | head -n 1)
          
          if [ -n "$WORKSPACE_FILE" ]; then
            echo "Using workspace: $WORKSPACE_FILE"
            echo "XCODE_FILE=$WORKSPACE_FILE" >> $GITHUB_ENV
            echo "XCODE_TYPE=workspace" >> $GITHUB_ENV
          else
            echo "Using project: $PROJECT_FILE"
            echo "XCODE_FILE=$PROJECT_FILE" >> $GITHUB_ENV
            echo "XCODE_TYPE=project" >> $GITHUB_ENV
          fi
      
      - name: 🔍 Detect scheme
        id: detect_scheme
        working-directory: ./ios
        run: |
          # List available schemes
          if [ "$XCODE_TYPE" = "workspace" ]; then
            xcodebuild -workspace "$XCODE_FILE" -list > ../build/logs/schemes.log
          else
            xcodebuild -project "$XCODE_FILE" -list > ../build/logs/schemes.log
          fi
          
          # Extract scheme prioritizing app-like schemes
          SCHEME_NAME=$(cat ../build/logs/schemes.log | grep -A 20 "Schemes:" | grep -v "Schemes:" | grep -v '^$' | grep -E "(DawnPatrol|Alarm|dp-|soda)" | head -n 1 | xargs)
          
          # Fallback options if no match
          if [ -z "$SCHEME_NAME" ]; then
            SCHEME_NAME=$(cat ../build/logs/schemes.log | grep -A 20 "Schemes:" | grep -v "Schemes:" | grep -v '^$' | grep -v -E "(boost|Pod|EX|React|Double)" | head -n 1 | xargs)
          fi
          
          if [ -z "$SCHEME_NAME" ]; then
            SCHEME_NAME=$(cat ../build/logs/schemes.log | grep -A 20 "Schemes:" | grep -v "Schemes:" | grep -v '^$' | grep -v "boost" | head -n 1 | xargs)
          fi
          
          if [ -z "$SCHEME_NAME" ]; then
            echo "❌ ERROR: No valid scheme found"
            cat ../build/logs/schemes.log
            exit 1
          fi
          
          echo "✅ Selected scheme: $SCHEME_NAME"
          echo "SCHEME_NAME=$SCHEME_NAME" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=../build/${SCHEME_NAME}.xcarchive" >> $GITHUB_ENV
      
      - name: 🛠 Update Podfile iOS version
        working-directory: ./ios
        run: |
          if [ -f "Podfile" ]; then
            echo "Updating iOS deployment target..."
            
            # Set minimum iOS version to 12.0
            if ! grep -q "platform :ios" Podfile; then
              sed -i '' '1s/^/platform :ios, '\''12.0'\'\'$'\n/' Podfile
            else
              sed -i '' 's/platform :ios, .*$/platform :ios, '\''12.0'\''/' Podfile
            fi
            
            # Add/update post_install hook
            if ! grep -q "post_install" Podfile; then
              echo "Adding post_install hook to fix pod deployment targets..."
              echo "" >> Podfile
              echo "post_install do |installer|" >> Podfile
              echo "  installer.pods_project.targets.each do |target|" >> Podfile
              echo "    target.build_configurations.each do |config|" >> Podfile
              echo "      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'" >> Podfile
              echo "    end" >> Podfile
              echo "  end" >> Podfile
              echo "end" >> Podfile
            fi
            
            # Store original Podfile for debugging
            cp Podfile ../build/logs/Podfile.original
          fi
      
      - name: 📦 Install CocoaPods dependencies
        working-directory: ./ios
        run: |
          echo "Installing pods..."
          pod install --repo-update | tee ../build/logs/pod_install.log || true
          
          # Check if successful
          if [ -f "Podfile.lock" ]; then
            echo "✅ CocoaPods dependencies installed"
          else
            echo "⚠️ CocoaPods may have failed, continuing anyway..."
          fi
      
      - name: 🏗 Build for testing
        working-directory: ./ios
        run: |
          echo "🏗 Testing build configuration..."
          
          # Common build settings
          COMMON_BUILD_ARGS=(
            "-configuration" "Release"
            "-destination" "generic/platform=iOS"
            "IPHONEOS_DEPLOYMENT_TARGET=12.0"
            "ONLY_ACTIVE_ARCH=NO"
            "ARCHS=arm64"
            "VALID_ARCHS=arm64"
            "ENABLE_BITCODE=NO"
            "COMPILER_INDEX_STORE_ENABLE=NO"
            "-allowProvisioningUpdates"
          )
          
          # Try manual signing first
          if [ "$XCODE_TYPE" = "workspace" ]; then
            set +e
            xcodebuild build \
              -workspace "$XCODE_FILE" \
              -scheme "$SCHEME_NAME" \
              "${COMMON_BUILD_ARGS[@]}" \
              CODE_SIGN_IDENTITY="${{ secrets.IOS_DIST_CODE_SIGN_IDENTITY }}" \
              PROVISIONING_PROFILE="${{ env.IOS_DIST_PROVISIONING_PROFILE_UUID_EXTRACTED }}" \
              DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
              CODE_SIGN_STYLE=Manual \
              > ../build/logs/build_test.log 2>&1
            MANUAL_BUILD_RESULT=$?
            set -e
          else
            set +e
            xcodebuild build \
              -project "$XCODE_FILE" \
              -scheme "$SCHEME_NAME" \
              "${COMMON_BUILD_ARGS[@]}" \
              CODE_SIGN_IDENTITY="${{ secrets.IOS_DIST_CODE_SIGN_IDENTITY }}" \
              PROVISIONING_PROFILE="${{ secrets.IOS_DIST_PROVISIONING_PROFILE_UUID }}" \
              DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
              CODE_SIGN_STYLE=Manual \
              > ../build/logs/build_test.log 2>&1
            MANUAL_BUILD_RESULT=$?
            set -e
          fi
          
          # Determine signing method based on test result
          if [ $MANUAL_BUILD_RESULT -eq 0 ]; then
            echo "✅ Build test with manual signing succeeded"
            echo "SIGNING_METHOD=manual" >> $GITHUB_ENV
          else
            echo "⚠️ Build test with manual signing failed, will use automatic signing"
            echo "SIGNING_METHOD=automatic" >> $GITHUB_ENV
            
            # Only show error log if debug is enabled
            if [ "$DEBUG_MODE" = "true" ]; then
              echo "=== BUILD TEST ERROR LOG ==="
              cat ../build/logs/build_test.log
            fi
          fi
      
      - name: 🏗 Create archive
        working-directory: ./ios
        run: |
          echo "🏗 Creating archive with $SIGNING_METHOD signing..."
          
          # Common archive settings
          COMMON_ARCHIVE_ARGS=(
            "-configuration" "Release"
            "-destination" "generic/platform=iOS"
            "-archivePath" "$ARCHIVE_PATH"
            "IPHONEOS_DEPLOYMENT_TARGET=12.0"
            "ONLY_ACTIVE_ARCH=NO"
            "ARCHS=arm64"
            "VALID_ARCHS=arm64"
            "ENABLE_BITCODE=NO"
            "COMPILER_INDEX_STORE_ENABLE=NO"
            "-allowProvisioningUpdates"
          )
          
          # Create archive based on determined signing method
          if [ "$SIGNING_METHOD" = "manual" ]; then
            if [ "$XCODE_TYPE" = "workspace" ]; then
              set +e
              xcodebuild archive \
                -workspace "$XCODE_FILE" \
                -scheme "$SCHEME_NAME" \
                "${COMMON_ARCHIVE_ARGS[@]}" \
                CODE_SIGN_IDENTITY="${{ secrets.IOS_DIST_CODE_SIGN_IDENTITY }}" \
                PROVISIONING_PROFILE="${{ env.IOS_DIST_PROVISIONING_PROFILE_UUID_EXTRACTED }}" \
                DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
                CODE_SIGN_STYLE=Manual \
                > ../build/logs/archive.log 2>&1
              ARCHIVE_RESULT=$?
              set -e
            else
              set +e
              xcodebuild archive \
                -project "$XCODE_FILE" \
                -scheme "$SCHEME_NAME" \
                "${COMMON_ARCHIVE_ARGS[@]}" \
                CODE_SIGN_IDENTITY="${{ secrets.IOS_DIST_CODE_SIGN_IDENTITY }}" \
                PROVISIONING_PROFILE="${{ secrets.IOS_DIST_PROVISIONING_PROFILE_UUID }}" \
                DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
                CODE_SIGN_STYLE=Manual \
                > ../build/logs/archive.log 2>&1
              ARCHIVE_RESULT=$?
              set -e
            fi
          else
            # Automatic signing
            if [ "$XCODE_TYPE" = "workspace" ]; then
              set +e
              xcodebuild archive \
                -workspace "$XCODE_FILE" \
                -scheme "$SCHEME_NAME" \
                "${COMMON_ARCHIVE_ARGS[@]}" \
                DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
                CODE_SIGN_STYLE=Automatic \
                > ../build/logs/archive.log 2>&1
              ARCHIVE_RESULT=$?
              set -e
            else
              set +e
              xcodebuild archive \
                -project "$XCODE_FILE" \
                -scheme "$SCHEME_NAME" \
                "${COMMON_ARCHIVE_ARGS[@]}" \
                DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
                CODE_SIGN_STYLE=Automatic \
                > ../build/logs/archive.log 2>&1
              ARCHIVE_RESULT=$?
              set -e
            fi
          fi
          
          # Check archive result
          if [ $ARCHIVE_RESULT -eq 0 ]; then
            echo "✅ Archive created successfully"
          else
            echo "❌ Archive failed"
            
            # Process log with xcode-log-processor
            if [ -f "../scripts/xcode-log-processor.sh" ]; then
              chmod +x ../scripts/xcode-log-processor.sh
              ../scripts/xcode-log-processor.sh ../build/logs/archive.log
              
              # Show the processed errors
              if [ -f "../build/logs/archive.log_errors.txt" ]; then
                echo "=== ARCHIVE ERRORS ==="
                cat ../build/logs/archive.log_errors.txt
              fi
            else
              # Simple error extraction if processor not available
              echo "=== ARCHIVE ERRORS ==="
              grep -E "error:|fatal:" ../build/logs/archive.log | head -20
            fi
            
            exit 1
          fi
      
      - name: 🔍 Verify archive
        working-directory: ./ios
        run: |
          if [ -d "$ARCHIVE_PATH" ]; then
            echo "✅ Verifying archive structure..."
            
            # Check for app bundles
            APP_COUNT=$(find "$ARCHIVE_PATH" -name "*.app" -type d | wc -l | xargs)
            echo "Found $APP_COUNT .app bundles in archive"
            
            if [ "$APP_COUNT" -eq 0 ]; then
              echo "❌ CRITICAL: Archive exists but contains no .app bundles"
              exit 1
            fi
            
            # Display basic archive info (only key files)
            if [ "$DEBUG_MODE" = "true" ]; then
              echo "=== ARCHIVE DEBUG INFO ==="
              find "$ARCHIVE_PATH" -name "*.app" -type d | sort
              cat "$ARCHIVE_PATH/Info.plist" > ../build/logs/archive_info.plist
              echo "Archive Info.plist saved to build/logs/archive_info.plist"
            fi
          else
            echo "❌ Archive not found at $ARCHIVE_PATH"
            exit 1
          fi
      
      - name: 📊 Generate build report
        if: always()
        run: |
          echo "=============================================" >> build/logs/build_summary.log
          echo "Build completed at $(date)" >> build/logs/build_summary.log
          echo "Build result: ${ARCHIVE_RESULT:-UNKNOWN}" >> build/logs/build_summary.log
          echo "Scheme: $SCHEME_NAME" >> build/logs/build_summary.log
          echo "Bundle ID: $EXPECTED_BUNDLE_ID" >> build/logs/build_summary.log
          echo "=============================================" >> build/logs/build_summary.log
          
          # Display build summary
          cat build/logs/build_summary.log
      
      - name: 📦 Upload build logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ios-build-logs
          path: build/logs/
          retention-days: 7
      
      # Export & Upload to TestFlight steps would follow here
