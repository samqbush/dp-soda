name: Build Dawn Patrol Alarm - iOS

on:
  pull_request:
    branches: [dev, ios]
  workflow_dispatch:

jobs:
  ios:
    runs-on: macos-latest
    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: üßπ Clean previous builds and caches
        run: |
          rm -rf node_modules/.cache .expo ios

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîß Install Expo CLI and authenticate
        run: |
          npm install -g @expo/cli
          npx expo whoami
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          CI: 1

      - name: üîç Fix package versions
        run: npx expo install --fix

      - name: üß™ Run checks
        run: |
          npm run lint

      # Extract app version and bundle identifier from app.config.js
      - name: üè∑Ô∏è Extract app version and bundle ID from app.config.js
        id: get_version
        run: |
          VERSION=$(node -p "const c = require('./app.config.js'); (typeof c === 'function' ? c() : c).default.expo.version")
          BUNDLE_ID=$(node -p "const c = require('./app.config.js'); (typeof c === 'function' ? c() : c).default.expo.ios.bundleIdentifier")
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "App Version: $VERSION"
          echo "Bundle Identifier: $BUNDLE_ID"
          
      # Create .env file from GitHub secrets
      - name: üîê Create .env file
        run: |
          echo "ECOWITT_APPLICATION_KEY=${{ secrets.ECOWITT_APPLICATION_KEY }}" > .env
          echo "ECOWITT_API_KEY=${{ secrets.ECOWITT_API_KEY }}" >> .env
          echo "‚úÖ Created .env file with API credentials"

      # Set up Xcode
      - name: üçé Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      # Generate the native iOS project
      - name: üîß Generate native iOS project
        run: npx expo prebuild --platform ios --clean
        env:
          CI: 1
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      
      # Install CocoaPods dependencies
      - name: üì¶ Install CocoaPods dependencies
        run: |
          cd ios
          pod install
          cd ..

      # Set up iOS signing
      - name: üîê Set up iOS signing
        run: |
          # Create keychain
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security set-keychain-settings -t 1800 -l build.keychain
          
          # Import distribution certificate
          echo "${{ secrets.IOS_DIST_CERTIFICATE_P12_BASE64 }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "${{ secrets.IOS_DIST_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          
          # Import provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.IOS_DIST_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          
          # Set code signing permissions
          security set-key-partition-list -S apple-tool:,apple: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          
          echo "iOS distribution signing setup complete"

      # Build and archive iOS app
      - name: üèóÔ∏è Build and Archive iOS App
        run: |
          cd ios
          
          # Find the .xcworkspace (required)
          WORKSPACE_FILE=$(find . -maxdepth 1 -name "*.xcworkspace" | sed 's|./||')
          echo "Found workspace: $WORKSPACE_FILE"
          BUILD_COMMAND="xcodebuild archive -workspace $WORKSPACE_FILE -scheme DawnPatrolAlarm"
          
          # Extract provisioning profile UUID and name
          PROFILE_UUID=$(grep -A1 -a 'UUID' ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          PROFILE_NAME=$(grep -A1 -a '<key>Name</key>' ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          echo "Provisioning Profile UUID: $PROFILE_UUID"
          echo "Provisioning Profile Name: $PROFILE_NAME"
          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          
          # Confirm the bundle identifier we're using
          echo "Using bundle identifier: ${{ env.BUNDLE_ID }}"
          
          # Build and archive
          $BUILD_COMMAND \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath ../build/dpsoda.xcarchive \
            CODE_SIGN_IDENTITY="${{ secrets.IOS_DIST_CODE_SIGN_IDENTITY }}" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
            CODE_SIGN_STYLE="Manual" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME"
          echo "iOS app archived successfully"

      # Export IPA
      - name: üì¶ Export IPA
        run: |
          # Use bundle identifier from previous step
          echo "Using Bundle Identifier: ${{ env.BUNDLE_ID }}"
          
          # Create export options plist with provisioning profile
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>uploadSymbols</key>
            <true/>
            <key>uploadBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${{ env.BUNDLE_ID }}</key>
              <string>${{ env.PROFILE_NAME }}</string>
            </dict>
          </dict>
          </plist>
          EOF
          
          # Display export options for debugging
          echo "Export options:"
          cat ExportOptions.plist
          
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath build/dpsoda.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptions.plist
          
          # Find and rename the exported IPA 
          echo "Searching for IPA file in build directory..."
          ls -la build/
          EXPORTED_IPA=$(find build -name "*.ipa" | head -1)
          echo "Found IPA file: $EXPORTED_IPA"
          
          # Rename IPA to include version
          mv "$EXPORTED_IPA" ./dp-soda-${{ env.APP_VERSION }}.ipa
          
          echo "IPA exported successfully"

      # Upload to TestFlight (commented out for manual testing)
      # - name: üöÄ Upload to TestFlight
      #   run: |
      #     # Create App Store Connect API key file
      #     mkdir -p ~/.appstoreconnect/private_keys
      #     echo "${{ secrets.ASC_PRIVATE_KEY }}" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.ASC_KEY_ID }}.p8
      #     
      #     # Upload to TestFlight using altool
      #     xcrun altool --upload-app \
      #       --type ios \
      #       --file "./dp-soda-${{ env.APP_VERSION }}.ipa" \
      #       --apiKey "${{ secrets.ASC_KEY_ID }}" \
      #       --apiIssuer "${{ secrets.ASC_ISSUER_ID }}" \
      #       --verbose
      #     
      #     echo "Successfully uploaded to TestFlight"

      # Upload IPA as GitHub artifact
      - name: üì§ Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dp-soda-ios-${{ env.APP_VERSION }}
          path: ./dp-soda-${{ env.APP_VERSION }}.ipa

      # Add build summary
      - name: üìã Build Summary
        run: |
          echo "## üéâ iOS App Store Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì± Build Information:" >> $GITHUB_STEP_SUMMARY
          echo "- **App Version**: ${{ env.APP_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: iOS" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type**: App Store Distribution" >> $GITHUB_STEP_SUMMARY
          echo "- **Distribution**: Manual upload to TestFlight" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Available Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- **App Store IPA**: \`dp-soda-ios-${{ env.APP_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Ready for TestFlight**: Download IPA and upload manually to App Store Connect" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Manual Upload Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the IPA artifact from this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "2. Open [App Store Connect](https://appstoreconnect.apple.com)" >> $GITHUB_STEP_SUMMARY
          echo "3. Go to your app > TestFlight > iOS builds" >> $GITHUB_STEP_SUMMARY
          echo "4. Click the '+' button to upload a new build" >> $GITHUB_STEP_SUMMARY
          echo "5. Upload the downloaded IPA file" >> $GITHUB_STEP_SUMMARY
          echo "6. Wait for processing and add to TestFlight for beta testing" >> $GITHUB_STEP_SUMMARY
