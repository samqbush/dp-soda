name: Build Dawn Patrol Alarm

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: 🧹 Clean previous builds and caches
        run: |
          rm -rf node_modules/.cache .expo android

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Install Expo CLI and authenticate
        run: |
          npm install -g @expo/cli
          npx expo whoami
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          CI: 1

      - name: 🔍 Fix package versions
        run: npx expo install --fix

      - name: 🧪 Run checks
        run: |
          npm run lint
          npx tsc --noEmit --skipLibCheck
        
      # Android build setup
      - name: ☕ Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 📱 Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: 💾 Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Generate the native Android project
      - name: 🔧 Generate native Android project
        run: npx expo prebuild --platform android --clean
        env:
          CI: 1
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      # Create a keystore file from secrets
      - name: 🔐 Setup Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> android/gradle.properties
          echo "keyAlias=upload-key" >> android/gradle.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/gradle.properties
          echo "keyPassword=${{ secrets.STORE_PASSWORD }}" >> android/gradle.properties

      # Update gradle.properties for better build performance
      - name: ⚙️ Configure Gradle for production build
        run: |
          echo "org.gradle.jvmargs=-Xmx4g -XX:+HeapDumpOnOutOfMemoryError -XX:+UseParallelGC -XX:MaxMetaspaceSize=512m" >> android/gradle.properties
          echo "org.gradle.parallel=true" >> android/gradle.properties
          echo "org.gradle.configureondemand=true" >> android/gradle.properties
          echo "android.enableR8.fullMode=false" >> android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties
          echo "android.useAndroidX=true" >> android/gradle.properties
          echo "android.useFullClasspathForDexingTransform=true" >> android/gradle.properties
          echo "android.enableR8=true" >> android/gradle.properties
          echo "android.enableProguard=false" >> android/gradle.properties

      - name: 🔧 Add build metadata
        run: |
          if [ -f "android/app/src/main/AndroidManifest.xml" ]; then
            sed -i '/<application/a\        <meta-data android:name="crash_detection_build" android:value="github_actions_enhanced" />' android/app/src/main/AndroidManifest.xml
            sed -i '/<application/a\        <meta-data android:name="build_timestamp" android:value="'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'" />' android/app/src/main/AndroidManifest.xml
          fi

      # Build the AAB
      - name: 🏗️ Build Android App Bundle
        run: |
          cd android
          ./gradlew bundleRelease

      # Upload the AAB as an artifact
      - name: 📤 Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: android/app/build/outputs/bundle/release/app-release.aab

      # Convert AAB to APKs for device testing
      - name: 📥 Download Bundletool
        run: |
          curl -L -o bundletool.jar https://github.com/google/bundletool/releases/download/1.15.6/bundletool-all-1.15.6.jar

      - name: 📱 Generate Universal APK from AAB
        run: |
          java -jar bundletool.jar build-apks \
            --bundle=android/app/build/outputs/bundle/release/app-release.aab \
            --output=android/app/build/outputs/bundle/release/app-release.apks \
            --ks=android/app/upload-keystore.jks \
            --ks-key-alias=upload-key \
            --ks-pass=pass:${{ secrets.STORE_PASSWORD }} \
            --key-pass=pass:${{ secrets.STORE_PASSWORD }} \
            --mode=universal

      - name: 📦 Extract Universal APK
        run: |
          cd android/app/build/outputs/bundle/release
          unzip -j app-release.apks universal.apk
          mv universal.apk app-release-universal.apk

      - name: 📤 Upload Universal APK for device testing
        uses: actions/upload-artifact@v4
        with:
          name: app-universal-apk
          path: android/app/build/outputs/bundle/release/app-release-universal.apk

      # Add a brief build summary
      - name: 📋 Build Summary
        run: |
          echo "## 🎉 Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 Available Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- **AAB**: For Google Play Store submission" >> $GITHUB_STEP_SUMMARY
          echo "- **Universal APK**: For direct device installation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Testing Instructions:" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the \`app-universal-apk\` artifact" >> $GITHUB_STEP_SUMMARY
          echo "2. Install on your Android device" >> $GITHUB_STEP_SUMMARY
          echo "3. Run the app and verify functionality" >> $GITHUB_STEP_SUMMARY

