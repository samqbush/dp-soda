name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Expo CLI
        run: npm install -g @expo/cli

      - name: Authenticate with Expo
        run: npx expo whoami
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          CI: 1

      # Optional: Run tests if you have them
      # - name: Run tests
      #   run: npm test
        
      # Build for Android locally
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Generate the native Android project
      - name: Clean and generate native Android project
        run: |
          rm -rf android
          npx expo prebuild --platform android --clean
        env:
          CI: 1
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      # Create a keystore file from secrets
      - name: Setup Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> android/gradle.properties
          echo "keyAlias=upload-key" >> android/gradle.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/gradle.properties
          echo "keyPassword=${{ secrets.STORE_PASSWORD }}" >> android/gradle.properties

      # Update gradle.properties for better build performance
      - name: Configure Gradle for production build
        run: |
          echo "org.gradle.jvmargs=-Xmx4g -XX:+HeapDumpOnOutOfMemoryError -XX:+UseParallelGC -XX:MaxMetaspaceSize=512m" >> android/gradle.properties
          echo "org.gradle.parallel=true" >> android/gradle.properties
          echo "org.gradle.configureondemand=true" >> android/gradle.properties
          echo "android.enableR8.fullMode=false" >> android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties
          cat android/gradle.properties

      # Configure build for optimal performance and stability
      - name: Configure Android build settings
        run: |
          # Create assets directory first
          mkdir -p android/app/src/main/assets
          # Generate build-config.json with build metadata
          echo '// This file is automatically generated during build process' > android/app/src/main/assets/build-config.json
          echo '{' >> android/app/src/main/assets/build-config.json
          echo '  "buildDate": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'", ' >> android/app/src/main/assets/build-config.json
          echo '  "buildNumber": "'$GITHUB_RUN_NUMBER'", ' >> android/app/src/main/assets/build-config.json
          echo '  "commit": "'$GITHUB_SHA'", ' >> android/app/src/main/assets/build-config.json
          echo '  "memoryOptimized": true ' >> android/app/src/main/assets/build-config.json
          echo '}' >> android/app/src/main/assets/build-config.json
          # Create gradle.properties with optimized settings
          echo 'org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError' >> android/gradle.properties
          echo 'org.gradle.parallel=true' >> android/gradle.properties
          echo 'org.gradle.configureondemand=true' >> android/gradle.properties
          echo 'org.gradle.caching=true' >> android/gradle.properties
          # Add configuration to prevent duplicate React instance
          echo 'hermesEnabled=true' >> android/gradle.properties
          # Add configurations to fix dependency issues
          echo 'android.enableDexingArtifactTransform=false' >> android/gradle.properties
        shell: bash

      # Build the AAB with detailed logging
      - name: Build Android App Bundle
        run: |
          cd android
          ./gradlew bundleRelease --stacktrace --info

      # Upload the AAB as an artifact
      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: android/app/build/outputs/bundle/release/app-release.aab

      # Convert AAB to APKs for device testing
      - name: Download Bundletool
        run: |
          curl -L -o bundletool.jar https://github.com/google/bundletool/releases/download/1.15.6/bundletool-all-1.15.6.jar

      - name: Generate APKs from AAB
        run: |
          java -jar bundletool.jar build-apks \
            --bundle=android/app/build/outputs/bundle/release/app-release.aab \
            --output=android/app/build/outputs/bundle/release/app-release.apks \
            --ks=android/app/upload-keystore.jks \
            --ks-key-alias=upload-key \
            --ks-pass=pass:${{ secrets.STORE_PASSWORD }} \
            --key-pass=pass:${{ secrets.STORE_PASSWORD }} \
            --mode=universal

      - name: Extract Universal APK
        run: |
          cd android/app/build/outputs/bundle/release
          unzip -j app-release.apks universal.apk
          mv universal.apk app-release-universal.apk

      - name: Upload Universal APK for device testing
        uses: actions/upload-artifact@v4
        with:
          name: app-universal-apk
          path: android/app/build/outputs/bundle/release/app-release-universal.apk

